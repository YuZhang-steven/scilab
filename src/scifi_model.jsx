/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from 'three'
import { a, useSpring, animated } from "@react-spring/three";
import { useFrame } from "@react-three/fiber";






export default function Scifi_model(props) {

  // useFrame(() => {
  //   icon01.current.position.x -= 0.01

  //   if (icon01.current.position.x < -3) {
  //     icon01.current.position.x = 0
  //   }




  // })

  const icon01 = useRef()
  const icon02 = useRef()
  const icon03 = useRef()
  const rotateWheel = useRef()
  const webShow = useRef()

  let currDegY = 0

  const [springs, api] = useSpring(() => ({

    rotation: [0, 0, 0],
    config: { mass: 4, friction: 100 }
  }), [])

  const [icon001] = useSpring(() => ({
    from: {
      pos: [0, 0, 0],

    },
    to: {
      pos: [-3, 0, 0],

    },
    config: { duration: 4000 },
    delay: 100,
    loop: true
  }))

  const [icon002] = useSpring(() => ({
    from: {
      pos: [0, 0, 0],

    },
    to: {
      pos: [-3, 0, 0],

    },
    config: { duration: 4000 },
    delay: 500,
    loop: true
  }))

  const [icon003] = useSpring(() => ({
    from: {
      pos: [0, 0, 0],

    },
    to: {
      pos: [-3, 0, 0],

    },
    config: { duration: 4000 },
    delay: 1000,
    loop: true
  }))


  // console.log(springs)

  const rotateClick = (event) => {

    let center = new THREE.Vector3(
      event.eventObject.position.x,
      event.eventObject.position.y,
      event.eventObject.position.z,
    )

    center.project(event.camera)
    let intersect = event.pointer

    // console.log("center")
    // console.log(center)
    // console.log("intersect")
    // console.log(intersect)

    if (intersect.x > center.x) {
      console.log("right")
      api.start({ rotation: [0, webShow.current.rotation.y + 0.5, 0] })


    } else {
      console.log('left')
      api.start({ rotation: [0, webShow.current.rotation.y - 0.5, 0] })
      // webShow.current.rotation.y -= 0.5

    }


    //https://www.react-spring.dev/docs/guides/react-three-fiber

  }






  const iconClick = () => {
    console.log("icon click")
    icon01.current.material.color.set(`hsl(${Math.random() * 360}, 100%, 75%)`)
  }

  const { nodes, materials } = useGLTF("src/assets/Sci-fi_lab_export.gltf");
  return (

    <group {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="upper_floor"
          castShadow
          receiveShadow
          geometry={nodes.upper_floor.geometry}
          material={materials.Grey}
        />
        <mesh
          name="machine01"
          castShadow
          receiveShadow
          geometry={nodes.machine01.geometry}
          material={nodes.machine01.material}
        />
        <mesh
          name="machine02"
          castShadow
          receiveShadow
          geometry={nodes.machine02.geometry}
          material={materials["Dark grey"]}
        />
        <mesh
          name="machine03"
          castShadow
          receiveShadow
          geometry={nodes.machine03.geometry}
          material={materials.White}
        />
        <mesh
          name="AvatarScreen"
          castShadow
          receiveShadow
          geometry={nodes.AvatarScreen.geometry}
          material={materials.Grey}
        />
        <mesh
          name="Back_Structure"
          castShadow
          receiveShadow
          geometry={nodes.Back_Structure.geometry}
          material={materials.Grey}
        />
        <mesh
          name="machine04"
          castShadow
          receiveShadow
          geometry={nodes.machine04.geometry}
          material={materials.Orange}
        />
        <mesh
          name="Plane001"
          castShadow
          receiveShadow
          geometry={nodes.Plane001.geometry}
          material={materials.Orange}
        />

        <mesh
          name="Cube005"
          castShadow
          receiveShadow
          geometry={nodes.Cube005.geometry}
          material={materials.Red}
        />
        <mesh
          name="Pipe"
          castShadow
          receiveShadow
          geometry={nodes.Pipe.geometry}
          material={materials.Grey}
        />
        <mesh
          name="Floor"
          castShadow
          receiveShadow
          geometry={nodes.Floor.geometry}
          material={materials.Grey}
        />
        <animated.mesh
          name="icon_cube01"
          castShadow
          receiveShadow
          geometry={nodes.icon_cube01.geometry}
          material={nodes.icon_cube01.material}
          position={icon001.pos}


          ref={icon01}
          onClick={iconClick}
        />
        <animated.mesh
          name="icon_cube02"
          castShadow
          receiveShadow
          geometry={nodes.icon_cube02.geometry}
          material={materials.Orange}
          position={icon002.pos}

          ref={icon02}
        />
        <animated.mesh
          name="icon_cube03"
          castShadow
          receiveShadow
          geometry={nodes.icon_cube03.geometry}
          material={materials.Red}
          position={icon003.pos}

          ref={icon03}
        />
        <mesh
          name="cylinders"
          castShadow
          receiveShadow
          geometry={nodes.cylinders.geometry}
          material={materials.Cyab}
        />
        <mesh
          name="test_cylinder001"
          castShadow
          receiveShadow
          geometry={nodes.test_cylinder001.geometry}
          material={materials["Cyab.001"]}
        />

        <mesh
          name="Base"
          castShadow
          receiveShadow
          geometry={nodes.Base.geometry}
          material={materials.Grey}

        />
        <mesh
          name="Rotate"
          castShadow
          receiveShadow
          geometry={nodes.Rotate.geometry}
          material={materials.White}

          ref={rotateWheel}
          onClick={rotateClick}


        />
        <mesh
          name="NameScreen"
          castShadow
          receiveShadow
          geometry={nodes.NameScreen.geometry}
          material={nodes.NameScreen.material}

        />
        <animated.mesh
          name="Web_Screen"
          castShadow
          receiveShadow
          geometry={nodes.Web_Screen.geometry}
          material={nodes.Web_Screen.material}

          rotation={springs.rotation}


          ref={webShow}
        />
        <mesh
          name="Stairs"
          castShadow
          receiveShadow
          geometry={nodes.Stairs.geometry}
          material={materials.White}
          position={[0, 0.318, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("src/assets/Sci-fi_lab_export.gltf");
